{
  "hash": "c13ad3cd3d183fdb84ad6abcc20d3284",
  "result": {
    "markdown": "---\ntitle: \"Profiling R code\"\nformat:\n  html:\n    highlight-style: \"default\"\n---\n\n\n> The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimisation is the root of all evil (or at least most of it) in programming.\n>\n> [*Donald Knuth*](https://en.wikiquote.org/wiki/Donald_Knuth)*, legendary computer scientist*\n\nIn our benchmarking explorations, we jumped in and started optimising the expression we *thought* would have most impact.\n\nBut this is not the right way to approach optimisation and we can often end up optimising parts of our code that do not contribute much to overall efficiency.\n\nThe best way to approach optimisation is to profile our code and identify bottlenecks that need our attention before beginning any optimisation.\n\n## `profvis()`\n\nThe best tool to perform this in R is the `profvis()` function in the `profvis` package.\n\n[Profvis](https://github.com/rstudio/profvis) is a tool for helping you to understand how R spends its time. It provides a interactive graphical interface for visualizing data from `Rprof`, R's built-in tool for collecting profiling data.\n\nIt is so fundamental that it ships with RStudio and can even be accessed directly from the IDE through the **Profile** menu.\n\n![](assets/images/rstudio_profile.png){width=\"205\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\nLet's use our previous example from the benchmarking section to see how we can use `profvis` to optimise our problem.\n\nAs a reminder, we're working with a data frame that has 151 columns and 40,000 rows. One of the columns contains an ID, and the other 150 columns contain numeric values.\n\nWhat we are trying to achieve is, for each numeric column, to take the mean and subtract it from the column, so that the new mean value of the column is zero.\n\nLet's create our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes <- 4e5\ncols <- 150\ndata <- as.data.frame(x = matrix(rnorm(times * cols, mean = 5), ncol = cols))\ndata <- cbind(id = paste0(\"g\", seq_len(times)), data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data   # Store in another variable for this run\n\n  # Get column means\n  means <- apply(data1[, names(data1) != \"id\"], 2, mean)\n\n  # Subtract mean from each column\n  for (i in seq_along(means)) {\n    data1[, names(data1) != \"id\"][, i] <- data1[, names(data1) != \"id\"][, i] - means[i]\n  }\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-894575607f5f8a66960e\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-894575607f5f8a66960e\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,48,49,49,50,50,51,51,52,52,52,52,53,53,53,53,54,54,55,55,56,56,56,56,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,60,60,60,60,60,61,61,61,61,62,62,63,63,63,63,64,64,64,64,65,65,66,66,67,67],\"depth\":[4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,2,1,2,1,2,1,4,3,2,1,4,3,2,1,2,1,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,2,1,4,3,2,1,4,3,2,1,2,1,2,1,2,1],\"label\":[\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"<GC>\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"<GC>\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"<GC>\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"<GC>\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"<GC>\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"<GC>\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"[<-.data.frame\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"FUN\",\"vapply\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\"],\"filenum\":[null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,1,null,1,null,1,null,1,null,1,null,null,null,1,null,null,null,1,null,1,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,1,null,null,null,1,null,1,null,null,null,null,null,1,null,1,null,1,null,1,null],\"linenum\":[null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,5,null,null,5,null,5,null,5,null,5,null,9,null,null,null,9,null,null,null,9,null,9,null,9,null,null,null,null,9,null,null,null,null,9,null,null,null,null,9,null,null,null,null,9,null,null,null,9,null,null,null,9,null,9,null,null,null,null,null,9,null,9,null,9,null,9,null],\"memalloc\":[937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.454978942871,937.450859069824,937.450859069824,937.450859069824,937.450859069824,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421318054199,937.421157836914,937.421157836914,937.421157836914,937.421157836914,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1395.18482971191,1399.76387786865,1399.76387786865,1431.8080291748,1431.8080291748,1463.85218048096,1463.85218048096,1495.89633178711,1495.89633178711,1527.94048309326,1527.94048309326,1559.98463439941,1559.98463439941,1592.02878570557,1592.02878570557,1624.07293701172,1624.07293701172,1656.11708831787,1656.11708831787,1688.16123962402,1688.16123962402,1570.66856384277,1570.66856384277,1570.66856384277,1404.3419418335,1404.3419418335,1436.38609313965,1436.38609313965,1468.4302444458,1468.4302444458,1502.00037384033,1502.00037384033,1537.09628295898,1537.09628295898,1569.14043426514,1569.14043426514,1602.71056365967,1602.71056365967,1637.80647277832,1637.80647277832,1669.85062408447,1669.85062408447,1683.58403015137,1683.58403015137,1683.58403015137,1410.446144104,1410.446144104,1445.54205322266,1445.54205322266,1477.58620452881,1477.58620452881,1502.61989593506,1502.61989593506,1502.61989593506,1502.61989593506,1546.32817077637,1546.32817077637,1546.32817077637,1546.32817077637,1590.07244873047,1590.07244873047,1633.76309204102,1633.76309204102,1677.45299530029,1677.45299530029,1677.45299530029,1677.45299530029,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,1687.84993743896,772.320304870605,772.320304870605,772.320304870605,772.320304870605,772.320304870605,657.175384521484,657.175384521484,657.175384521484,657.175384521484,657.175384521484,666.782440185547,666.782440185547,666.782440185547,666.782440185547,710.772308349609,710.772308349609,757.87158203125,757.87158203125,757.87158203125,757.87158203125,801.287162780762,801.287162780762,801.287162780762,801.287162780762,841.912330627441,841.912330627441,885.430931091309,885.430931091309,925.933952331543,925.933952331543],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.004119873046875,0,0,0,-0.029541015625,0,0,0,0,0,0,0,0,0,0,0,-0.00016021728515625,0,0,0,457.763671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.57904815673828,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,-117.49267578125,0,0,-166.326622009277,0,32.0441513061523,0,32.0441513061523,0,33.5701293945312,0,35.0959091186523,0,32.0441513061523,0,33.5701293945312,0,35.0959091186523,0,32.0441513061523,0,13.7334060668945,0,0,-273.137886047363,0,35.0959091186523,0,32.0441513061523,0,25.03369140625,0,0,0,43.7082748413086,0,0,0,43.7442779541016,0,43.6906433105469,0,43.6899032592773,0,0,0,10.3969421386719,0,0,0,0,0,0,0,0,0,-915.529632568359,0,0,0,0,-115.144920349121,0,0,0,0,9.6070556640625,0,0,0,43.9898681640625,0,47.0992736816406,0,0,0,43.4155807495117,0,0,0,40.6251678466797,0,43.5186004638672,0,40.5030212402344,0],\"filename\":[null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data   # Store in another variable for this run\\n\\n  # Get column means\\n  means <- apply(data1[, names(data1) != \\\"id\\\"], 2, mean)\\n\\n  # Subtract mean from each column\\n  for (i in seq_along(means)) {\\n    data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\\n  }\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08d491c699f.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n#### `profvis()` output\n\n##### Flame graph view\n\nThe first view in the profvis output is the flame graph view.\n\nIn the top panel we the code we profiled which includes the amount of time spent on each line of code as well as memory allocation and deallocation.\n\nThe bottom contains the flame graph. In the flame graph, the horizontal direction represents time in milliseconds, and the vertical direction represents the call stack.\n\nProfvis is interactive!\n\n-   As we mouse over the flame graph, information about each block will show in the info box.\n\n-   If we mouse over a line of code, all flame graph blocks that were called from that line will be highlighted.\n\n-   We can click and drag on the flame graph to pan up, down, left, right.\n\n-   We can double-click on a flamegraph block to zoom the x axis the width of that block.\n\n-   We can double-click on the background to zoom the x axis to its original extent.\n\n##### The data view\n\nIn addition to the flame graph view, profvis provides a *data view*, which can be seen by clicking on the Data tab. It provides a top-down tree view of the profile. Click the **code** column to expand the call stack under investigation and the following columns to reason about resource allocation:\n\n-   Memory: Memory allocated or deallocated (for negative numbers) for a given call stack.\n\n-   Time: Time spent in milliseconds.\n\n#### Interpreting profvis results\n\nBack to our example, what is profvis telling us? Well the first thing it's telling us is that we had not been optimising the slowest part of our code when we embarked on our benchmarking experiments! If anything this shows the importance of taking the time to profile properly!\n\nMost of the time is actually spent in the `apply` call to generate the `means` vector, so, in fact, that's the best candidate for a first pass at optimization. We can also see that the `apply` results in a lot of memory being allocated and deallocated.\n\nLooking at the flame graph (or data view), we can see that `apply` calls `as.matrix` and `aperm`. These two functions convert the data frame to a matrix and transpose it -- so much of this approach is spent on, frankly, unnecessarily transforming the data.\n\nSo let's think of some other approaches:\n\nAn obvious alternative is to use the `colMeans` function. Additionally, we could also use `lapply` or `vapply` to apply the `mean` function over each column.\n\nLet's compare the speed of these four different ways of getting column means. We could use `microbenchmark` for a quick speed test:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark::microbenchmark(\n  apply = apply(data[, names(data) != \"id\"], 2, mean),\n  colmeans = colMeans(data[, names(data) != \"id\"]),\n  lapply = lapply(data[, names(data) != \"id\"], mean),\n  vapply = vapply(data[, names(data) != \"id\"], mean, numeric(1)),\n  times = 5\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in microbenchmark::microbenchmark(apply = apply(data[, names(data) != :\nless accurate nanosecond times to avoid potential integer overflows\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: milliseconds\n     expr      min       lq     mean   median       uq      max neval cld\n    apply 522.4368 547.5246 546.7212 550.2159 550.6238 562.8049     5   c\n colmeans 141.4836 149.8637 157.6631 159.3270 163.4789 174.1621     5  b \n   lapply 110.1662 110.2276 110.4222 110.2537 110.4426 111.0209     5 a  \n   vapply 110.1621 110.2457 110.3451 110.2765 110.3672 110.6742     5 a  \n```\n:::\n:::\n\n\n`colMeans` is much faster than using `apply` with `mean` but that `lapply`/`vapply`are faster yet.\n\nTo dig into the underlying causes we could use `profvis` again, profiling each of our candidate approaches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data\n  # Four different ways of getting column means\n  apply(data1[, names(data1) != \"id\"], 2, mean)\n  colMeans(data1[, names(data1) != \"id\"])\n  lapply(data1[, names(data1) != \"id\"], mean)\n  vapply(data1[, names(data1) != \"id\"], mean, numeric(1))\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-88be5713a6af96a9ad7c\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-88be5713a6af96a9ad7c\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,25,25,26,26,27,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,35,36,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,58,58,59,59,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76],\"depth\":[4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,2,1,2,1,2,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1],\"label\":[\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"<GC>\",\"apply\",\".main\",\"<GC>\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\"],\"filenum\":[null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,1,null,1,null,1,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,1,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,1,null,1,null,1,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null],\"linenum\":[null,null,4,null,null,null,4,null,null,null,4,null,null,null,4,null,null,null,4,null,null,null,4,null,null,null,4,null,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,null,4,null,4,null,4,null,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,null,4,null,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,4,null,null,null,null,5,null,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null,5,null,5,null,5,null,5,null,null,6,null,null,6,null,null,6,null,null,6,null,null,6,null,null,6,null,null,6,null,null,6,null,null,6,null,null,7,null,null,7,null,null,7,null,null,7,null,null,7,null,null,7,null,null,7,null],\"memalloc\":[1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1410.16053009033,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1867.92858886719,1892.34442901611,1892.34442901611,1927.44033813477,1927.44033813477,1959.48448944092,1959.48448944092,1991.52872467041,1991.52872467041,1991.52872467041,2023.57279205322,2023.57279205322,2055.61694335938,2055.61694335938,2087.66109466553,2087.66109466553,2119.70524597168,2119.70524597168,2148.69763946533,2148.69763946533,2179.21591186523,2179.21591186523,2211.26006317139,2211.26006317139,2240.25235748291,2240.25235748291,2240.25235748291,1956.42889404297,1956.42889404297,1956.42889404297,1892.31678771973,1892.31678771973,1922.83506011963,1922.83506011963,1954.87921142578,1954.87921142578,1986.92336273193,1986.92336273193,2018.96751403809,2018.96751403809,2051.01166534424,2051.01166534424,2083.05581665039,2083.05581665039,2115.09996795654,2115.09996795654,2147.1441192627,2147.1441192627,2179.18827056885,2179.18827056885,1266.73760223389,1266.73760223389,1266.73760223389,1266.73760223389,1266.73760223389,1047.00760650635,1047.00760650635,1047.00760650635,1047.00760650635,1047.00760650635,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.1390838623,1410.14440917969,1410.14440917969,1410.14440917969,1410.14440917969,1410.14440917969,1410.14440917969,1410.14440917969,1410.14440917969,1410.15339660645,1410.15339660645,1410.15339660645,1410.15442657471,1410.15442657471,1410.15442657471,1410.15600585938,1410.15600585938,1410.15600585938,1410.15703582764,1410.15703582764,1410.15703582764,1410.15799713135,1410.15799713135,1410.15799713135,1410.15909576416,1410.15909576416,1410.15909576416,1410.16012573242,1410.16012573242,1410.16012573242,1410.16163635254,1410.16163635254,1410.16163635254,1410.1626663208,1410.1626663208,1410.1626663208,1410.17255401611,1410.17255401611,1410.17255401611,1410.17358398438,1410.17358398438,1410.17358398438,1410.17468261719,1410.17468261719,1410.17468261719,1410.17557525635,1410.17557525635,1410.17557525635,1410.17660522461,1410.17660522461,1410.17660522461,1410.17832183838,1410.17832183838,1410.17832183838,1410.18017578125,1410.18017578125,1410.18017578125],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,457.768058776855,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24.4158401489258,0,35.0959091186523,0,32.0441513061523,0,32.0442352294922,0,0,32.0440673828125,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,28.9923934936523,0,30.5182723999023,0,32.0441513061523,0,28.9922943115234,0,0,-283.823463439941,0,0,-64.1121063232422,0,30.5182723999023,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,32.0441513061523,0,-912.450668334961,0,0,0,0,-219.729995727539,0,0,0,0,363.131477355957,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0053253173828125,0,0,0,0,0,0,0,0.0089874267578125,0,0,0.00102996826171875,0,0,0.00157928466796875,0,0,0.00102996826171875,0,0,0.0009613037109375,0,0,0.0010986328125,0,0,0.00102996826171875,0,0,0.0015106201171875,0,0,0.00102996826171875,0,0,0.0098876953125,0,0,0.00102996826171875,0,0,0.0010986328125,0,0,0.00089263916015625,0,0,0.00102996826171875,0,0,0.00171661376953125,0,0,0.00185394287109375,0,0],\"filename\":[null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data\\n  # Four different ways of getting column means\\n  apply(data1[, names(data1) != \\\"id\\\"], 2, mean)\\n  colMeans(data1[, names(data1) != \\\"id\\\"])\\n  lapply(data1[, names(data1) != \\\"id\\\"], mean)\\n  vapply(data1[, names(data1) != \\\"id\\\"], mean, numeric(1))\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08d67f39457.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNow we see that `colMeans` is still using `as.matrix`, which takes a good chunk of time while the `lapply` and `vapply` primarily spend their time calling `mean.default`.\n\n`lapply` returns the values in a list, while `vapply` returns the values in a numeric vector, which is the form that we want, so it looks like `vapply` is the way to go for this part.\n\nSo let's edit our code, replacing `apply` with `vapply` and try again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data\n  means <- vapply(data1[, names(data1) != \"id\"], mean, numeric(1))\n\n  for (i in seq_along(means)) {\n    data1[, names(data1) != \"id\"][, i] <- data1[, names(data1) != \"id\"][, i] - means[i]\n  }\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-7254cc7bd671ccb51858\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7254cc7bd671ccb51858\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,15,15,15,15,16,16,16,17,17,17,17,18,18,19,19,20,20,20],\"depth\":[3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,4,3,2,1,4,3,2,1,4,3,2,1,2,1,4,3,2,1,3,2,1,4,3,2,1,2,1,2,1,3,2,1],\"label\":[\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"[<-.data.frame\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"order\",\"[<-.data.frame\",\".main\",\"data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\",\"force\",\"profvis\",\".main\",\"[<-.data.frame\",\".main\",\"[<-.data.frame\",\".main\",\"order\",\"[<-.data.frame\",\".main\"],\"filenum\":[null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,1,null,1,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,1,null,null,null,null,1,null,1,null,null,null,1,null,1,null,null,1,null],\"linenum\":[null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,6,null,6,null,6,null,null,null,6,null,null,null,6,null,null,null,6,null,6,null,null,null,null,6,null,6,null,null,null,6,null,6,null,null,6,null],\"memalloc\":[494.668937683105,494.668937683105,494.668937683105,494.670036315918,494.670036315918,494.670036315918,494.671615600586,494.671615600586,494.671615600586,494.673469543457,494.673469543457,494.673469543457,494.674774169922,494.674774169922,494.674774169922,494.675941467285,494.675941467285,494.675941467285,494.676971435547,494.676971435547,494.676971435547,494.678001403809,494.678001403809,494.678001403809,521.432373046875,521.432373046875,565.24390411377,565.24390411377,609.1171875,609.1171875,609.1171875,609.1171875,655.877220153809,655.877220153809,655.877220153809,655.877220153809,699.585494995117,699.585494995117,699.585494995117,699.585494995117,740.038749694824,740.038749694824,783.639869689941,783.639869689941,783.639869689941,783.639869689941,824.087684631348,824.087684631348,824.087684631348,867.694244384766,867.694244384766,867.694244384766,867.694244384766,908.267845153809,908.267845153809,951.77303314209,951.77303314209,992.271179199219,992.271179199219,992.271179199219],\"meminc\":[0,0,0,0.0010986328125,0,0,0.00157928466796875,0,0,0.00185394287109375,0,0,0.00130462646484375,0,0,0.00116729736328125,0,0,0.00102996826171875,0,0,0.00102996826171875,0,0,26.7543716430664,0,43.8115310668945,0,43.8732833862305,0,0,0,46.7600326538086,0,0,0,43.7082748413086,0,0,0,40.453254699707,0,43.6011199951172,0,0,0,40.4478149414062,0,0,43.606559753418,0,0,0,40.573600769043,0,43.5051879882812,0,40.4981460571289,0,0],\"filename\":[null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data\\n  means <- vapply(data1[, names(data1) != \\\"id\\\"], mean, numeric(1))\\n\\n  for (i in seq_along(means)) {\\n    data1[, names(data1) != \\\"id\\\"][, i] <- data1[, names(data1) != \\\"id\\\"][, i] - means[i]\\n  }\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08da50c98c.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nOur code is about 3x faster than the original version. Most of the time is now spent on line 6, and the majority of that is in the `[<-.data.frame` function. This is usually called with syntax `x[i, j] <- y`, which is equivalent to `` `[<-`(x, i, j, y) ``. In addition to being slow, the code is ugly: on each side of the assignment operator we're indexing into `data1` twice with `[`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data\n  means <- vapply(data1[, names(data1) != \"id\"], mean, numeric(1))\n\n    data1[, names(data1) != \"id\"] <- purrr::map2(\n                    data1[, names(data1) != \"id\"], \n                    means, \n                    ~.x - .y)\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-740a573cfeb1ebd30002\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-740a573cfeb1ebd30002\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12],\"depth\":[3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1],\"label\":[\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"file.exists\",\"loadNamespace\",\".main\",\".f\",\"map2_\",\"purrr::map2\",\".main\",\".f\",\"map2_\",\"purrr::map2\",\".main\",\".f\",\"map2_\",\"purrr::map2\",\".main\"],\"filenum\":[null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null],\"linenum\":[null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,5,null,null,null,5,null,null,null,5,null,null,null,5,null],\"memalloc\":[952.437469482422,952.437469482422,952.437469482422,952.438362121582,952.438362121582,952.438362121582,952.439392089844,952.439392089844,952.439392089844,952.441177368164,952.441177368164,952.441177368164,952.442138671875,952.442138671875,952.442138671875,952.443031311035,952.443031311035,952.443031311035,952.443923950195,952.443923950195,952.443923950195,952.445777893066,952.445777893066,952.445777893066,952.650314331055,952.650314331055,952.650314331055,1047.49850463867,1047.49850463867,1047.49850463867,1047.49850463867,1184.82794952393,1184.82794952393,1184.82794952393,1184.82794952393,1319.10562896729,1319.10562896729,1319.10562896729,1319.10562896729],\"meminc\":[0,0,0,0.00089263916015625,0,0,0.00102996826171875,0,0,0.0017852783203125,0,0,0.0009613037109375,0,0,0.00089263916015625,0,0,0.00089263916015625,0,0,0.00185394287109375,0,0,0.204536437988281,0,0,94.8481903076172,0,0,0,137.329444885254,0,0,0,134.277679443359,0,0,0],\"filename\":[null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data\\n  means <- vapply(data1[, names(data1) != \\\"id\\\"], mean, numeric(1))\\n\\n    data1[, names(data1) != \\\"id\\\"] <- purrr::map2(\\n                    data1[, names(data1) != \\\"id\\\"], \\n                    means, \\n                    ~.x - .y)\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08d401ad1ce.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nIn this case, it's useful to take a step back and think about the broader problem. We want to normalize each column. Couldn't we we apply a function over the columns that does both steps, taking the mean and subtracting it? Because a data frame is a list, and we want to assign a list of values into the data frame, we'll need to use `lapply`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data\n\n  # Given a column, normalize values and return them\n  col_norm <- function(col) {\n    col - mean(col)\n  }\n\n  # Apply the normalizer function over all columns except id\n  data1[, names(data1) != \"id\"] <- purrr::map_dfc(\n                    data1[, names(data1) != \"id\"],\n                    col_norm)\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-e1e2684d6dc18ae411bb\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e1e2684d6dc18ae411bb\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14],\"depth\":[6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1],\"label\":[\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"mean.default\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"mean.default\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"mean.default\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\",\"col - mean(col)\",\".f\",\"map_\",\"map\",\"purrr::map_dfc\",\".main\"],\"filenum\":[1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,1,null,1,null,null,null,1,null,null,null,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null],\"linenum\":[6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null,null,null,null,null,10,null,null,null,null,null,10,null,6,null,null,null,10,null,null,null,null,null,10,null,6,null,null,null,10,null,6,null,null,null,10,null],\"memalloc\":[962.945816040039,962.945816040039,962.945816040039,962.945816040039,962.945816040039,962.945816040039,996.515907287598,996.515907287598,996.515907287598,996.515907287598,996.515907287598,996.515907287598,1030.08599853516,1030.08599853516,1030.08599853516,1030.08599853516,1030.08599853516,1030.08599853516,1063.65608978271,1063.65608978271,1063.65608978271,1063.65608978271,1063.65608978271,1063.65608978271,1097.22618103027,1097.22618103027,1097.22618103027,1097.22618103027,1097.22618103027,1097.22618103027,1130.79627227783,1130.79627227783,1130.79627227783,1130.79627227783,1130.79627227783,1130.79627227783,1164.36636352539,1164.36636352539,1164.36636352539,1164.36636352539,1164.36636352539,1164.36636352539,1197.93645477295,1197.93645477295,1197.93645477295,1197.93645477295,1197.93645477295,1197.93645477295,1231.50653839111,1231.50653839111,1231.50653839111,1231.50653839111,1231.50653839111,1231.50653839111,1262.02480316162,1262.02480316162,1262.02480316162,1262.02480316162,1262.02480316162,1262.02480316162,1295.59490203857,1295.59490203857,1295.59490203857,1295.59490203857,1295.59490203857,1295.59490203857,1329.16498565674,1329.16498565674,1329.16498565674,1329.16498565674,1329.16498565674,1329.16498565674,1362.73501586914,1362.73501586914,1362.73501586914,1362.73501586914,1362.73501586914,1362.73501586914,1393.2533493042,1393.2533493042,1393.2533493042,1393.2533493042,1393.2533493042,1393.2533493042],\"meminc\":[0,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700912475586,0,0,0,0,0,33.5700836181641,0,0,0,0,0,30.5182647705078,0,0,0,0,0,33.5700988769531,0,0,0,0,0,33.5700836181641,0,0,0,0,0,33.5700302124023,0,0,0,0,0,30.5183334350586,0,0,0,0,0],\"filename\":[\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,null,null,\"<expr>\",null,null,null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data\\n\\n  # Given a column, normalize values and return them\\n  col_norm <- function(col) {\\n    col - mean(col)\\n  }\\n\\n  # Apply the normalizer function over all columns except id\\n  data1[, names(data1) != \\\"id\\\"] <- purrr::map_dfc(\\n                    data1[, names(data1) != \\\"id\\\"],\\n                    col_norm)\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08d376ad383.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis({\n  data1 <- data\n\n  # Given a column, normalize values and return them\n  col_norm <- function(col) {\n    col - mean(col)\n  }\n\n  # Apply the normalizer function over all columns except id\n  data1[, names(data1) != \"id\"] <- lapply(data1[, names(data1) != \"id\"], \n                                          col_norm)\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f7fce62848a90c32762e\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f7fce62848a90c32762e\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13],\"depth\":[4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1],\"label\":[\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"mean.default\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\",\"mean.default\",\"FUN\",\"lapply\",\".main\",\"col - mean(col)\",\"FUN\",\"lapply\",\".main\"],\"filenum\":[1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,null,1,null,1,null,1,null],\"linenum\":[6,null,10,null,6,null,10,null,6,null,10,null,6,null,10,null,6,null,10,null,6,null,10,null,null,null,10,null,6,null,10,null,6,null,10,null,6,null,10,null,6,null,10,null,null,null,10,null,6,null,10,null],\"memalloc\":[980.288116455078,980.288116455078,980.288116455078,980.288116455078,1013.85820770264,1013.85820770264,1013.85820770264,1013.85820770264,1047.4282989502,1047.4282989502,1047.4282989502,1047.4282989502,1080.99839019775,1080.99839019775,1080.99839019775,1080.99839019775,1114.56848144531,1114.56848144531,1114.56848144531,1114.56848144531,1148.13857269287,1148.13857269287,1148.13857269287,1148.13857269287,1181.70865631104,1181.70865631104,1181.70865631104,1181.70865631104,1215.27875518799,1215.27875518799,1215.27875518799,1215.27875518799,1248.84884643555,1248.84884643555,1248.84884643555,1248.84884643555,1282.41893768311,1282.41893768311,1282.41893768311,1282.41893768311,1315.98902893066,1315.98902893066,1315.98902893066,1315.98902893066,1349.55911254883,1349.55911254883,1349.55911254883,1349.55911254883,1383.12914276123,1383.12914276123,1383.12914276123,1383.12914276123],\"meminc\":[0,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700836181641,0,0,0,33.5700988769531,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700912475586,0,0,0,33.5700836181641,0,0,0,33.5700302124023,0,0,0],\"filename\":[\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"profvis({\\n  data1 <- data\\n\\n  # Given a column, normalize values and return them\\n  col_norm <- function(col) {\\n    col - mean(col)\\n  }\\n\\n  # Apply the normalizer function over all columns except id\\n  data1[, names(data1) != \\\"id\\\"] <- lapply(data1[, names(data1) != \\\"id\\\"], \\n                                          col_norm)\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/var/folders/yb/936h04ss57x2rdmly_tv561m0000gp/T//Rtmpi3eNgE/fileb08d6648e6e1.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNow we have code that's not only about 6x faster than our original -- it's shorter and more elegant as well. Not bad! The profiler data helped us to identify performance bottlenecks, and understanding of the underlying data structures allowed us to approach the problem in a more efficient way.\n\nCould we further optimize the code? It seems unlikely, given that all the time is spent in functions that are implemented in C (`mean` and `-`). That doesn't necessarily mean that there's no room for improvement, but this is a good place to move on to the next example.\n\n### `Rprof()`\n\nI just wanted to mention that `profvis` effectively wraps `utils` functions `Rprof()` and `Rprofmem()` that ship with R for profiling execution times and memory allocation.\n\nShould your code generate a really complicated call stack that is hard to weed through with `profvis()`, you could try `Rprof()` (which writes it's results to a file, here a temporary file) followed by `summaryRprof()` to drill down to the function calls that are taking the most time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprof_file <- tempfile()\n\nRprof(prof_file)\n\ndata1 <- data   # Store in another variable for this run\n\n# Get column means\nmeans <- apply(data1[, names(data1) != \"id\"], 2, mean)\n\n# Subtract mean from each column\nfor (i in seq_along(means)) {\n    data1[, names(data1) != \"id\"][, i] <- data1[, names(data1) != \"id\"][, i] - means[i]\n}\n\nRprof(NULL)\n\nsummaryRprof(prof_file)\n```\n:::\n\n\n### Further Reading:\n\n-   [Advanced R: **Measuring performance**](https://adv-r.hadley.nz/perf-measure.html)\n\n-   [Garbage collection in R](https://stat.ethz.ch/R-manual/R-patched/library/base/html/gc.html)\n\n-   [Memory in RStudio](https://support.posit.co/hc/en-us/articles/1500005616261-Understanding-Memory-Usage-in-the-RStudio-IDE)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"site_libs/profvis-binding-0.3.7/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}