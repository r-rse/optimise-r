{
  "hash": "bdc051e38b2a9ac65ffb99c6fb0c21cf",
  "result": {
    "markdown": "---\ntitle: \"Efficient Data Input/Output (I/O)\"\n---\n\n\nBefore we can work with data within R, we first have to be able to read it in. Conversely, once we've finished processing or analysing our data, we might need to write out final or intermediate results.\n\nMany factors will go into deciding which format and which read & write functions we might choose for our data. For example:\n\n-   File size\n\n-   Portability\n\n-   Interoperability\n\n-   Human readability\n\nIn this section we'll a number of the most common file formats for data (primarily tabular) and summarise their characteristics.\n\nWe'll also compare and benchmark functions and packages available in R for reading an writing them.\n\n## File formats\n\n### Flat files\n\nSome of the most common file formats we might be working with when dealing with tabular data are flat delimited text files. Such files store two-dimensional arrays of data by separating the values in each row with specific delimiter characters. A couple of well known examples are:\n\n-   Comma-Separated Values files (CSVs): use a comma to separate values.\n\n-   Tab-Separated Values files (TSVs): use a tab to separate values.\n\nThey are ubiquitous and human readable but as you will see, they take up quite a lot of disk space (comparatively) and can be slow to read and write when dealing with large files\n\n#### Packages/functions that can read/write delimited text files:\n\n##### Relevant functions\n\n###### Read\n\n-   `read.csv()` / `read.delim()`\n\n-   `readr::read_csv()`\n\n-   `data.table::fread()`\n\n-   `arrow::read_csv_arrow()`\n\n###### Write\n\n-   `write.csv()` / `write.delim()`\n\n-   `readr::write_csv()`\n\n-   `data.table::fwrite()`\n\n-   `arrow::write_csv_arrow()`\n\n### Binary files\n\nIf you look at [Wikipedia](https://en.wikipedia.org/wiki/Binary_file) for a definition of Binary files, you get:\n\n> A **binary file** is a [computer file](https://en.wikipedia.org/wiki/Computer_file \"Computer file\") that is not a [text file](https://en.wikipedia.org/wiki/Text_file \"Text file\") ðŸ˜œ\n\nYou'll also learn that binary files are usually thought of as being a sequence of [bytes](https://en.wikipedia.org/wiki/Byte \"Byte\"), and that some binary files contain headers, blocks of metadata used by a computer program to interpret the data in the file. Because they are stored in bytes, they are not human readable unless viewed through specialised viewers.\n\nThe process of writing out data to a binary format is called binary serialisation and different format can use different serialisation methods.\n\nLet's look at some binary formats you might consider as an R user.\n\n#### `RData/RDS` formats\n\n`.RData` and `.rds` files are binary formats specific to R that can be used to read complete R objects, so not just restricted to tabular data. They can therefore be good options for storing more complicated object like models etc. `.RData` files can store multiple objects while .`rds` are designed to contain a single object. Pertinent characteristics of such files:\n\n-   Can be faster to restore the data to R (but not necessarily as fast to write).\n\n-   Can preserve R specific information encoded in the data (e.g., attributes, variable types, etc).\n\n-   Are R specific so not interoperable outside of R environments.\n\n-   In R 3.6, the default serialisation version used to write `.Rdata` and `.rds` binary files changed from 2 to 3. This means that files serialised with version 3 will not be able to read by others running R \\< 3.5.0 which limits interoperability even between R users.\n\nOverall, while good for writing R objects, I would reserve writing such files only for ephemeral intermediate results or for more complex objects, where other formats are not appropriate. Be mindful of the serialisation version you use if you want users running R \\< 3.5.0 to be able to read them.\n\n##### Relevant functions\n\n###### Write\n\n-   `save()`: for writing `.RData` files.\n\n-   `saveRDS()`: for writing `.rds` files.\n\n###### Read\n\n-   `load()`: for writing `.RData` files.\n\n-   `readRDS()`: for writing `.rds` files.\n\n#### Apache parquet/arrow:\n\nWhile different file formats, I've bundled these two together because they are both Apache Foundation data formats. We also use the same R package (`arrow`) to read & write them.\n\n-   [**Apache Parquet**](https://parquet.apache.org/) is an open source, column-oriented data file format designed for efficient data storage and retrieval. It provides efficient data compression and encoding schemes with enhanced performance to handle complex data in bulk.\n\n-   [**Apache Arrow**](https://arrow.apache.org/docs/format/Columnar.html#format-columnar) defines a language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware like CPUs and GPUs.\n\nParquet is a storage format designed for maximum space efficiency, whereas Arrow is an in-memory format intended for operation by vectorized computational kernels.\n\nThe formats, as well as the `arrow` R package to interact with them, are part of the Apache Arrow software development platform for building high performance applications that process and transport large data sets.\n\n::: callout-note\n*You may have noticed the files I shared in `data/` as part of the course materials were all parquet files. That's because the compression of parquet files meant I could write a 10,000,000 table of data to a \\~67 MB file (compared to over 1GB in csv format!) and allowed me to share it through GitHub (and you to download it in a more acceptable time frame!*\n:::\n\n##### Relevant functions\n\n###### Write\n\n-   `arrow::write_parquet()`: for writing Apache parquet files.\n\n-   `arrow::write_feather():` for writing arrow IPC format files (arrow represent version 2 of feather files, hence the confusing name of the function).\n\n###### Read\n\n-   `arrow::read_parquet()`: for reading Apache parquet files.\n\n-   `arrow::read_feather():` for reading arrow IPC format files.\n\n#### `fst`\n\nThe [*fst* package](https://github.com/fstpackage/fst) for R is based on a number of C++ libraries and provides a fast, easy and flexible way to serialize data frames into the `fst` binary format. With access speeds of multiple GB/s, *fst* is specifically designed to unlock the potential of high speed solid state disks that can be found in most modern computers.\n\nThe *fst* file format provides full random access to stored datasets allowing retrieval of subsets of both columns and rows from a file. Files are also compressed.\n\n##### Relevant functions\n\n###### Write\n\n-   `fst::write.fst()`: for writing `fst` files.\n\n###### Read\n\n-   `fst::read.fst()`: for reading `fst` files.\n\n#### `qs`\n\nPackage [`qs`](https://github.com/traversc/qs) provides an interface for quickly saving and reading objects to and from disk. The goal of this package is to provide a lightning-fast and complete replacement for the `saveRDS` and `readRDS` functions in R.\n\n`saveRDS` and `readRDS` are the standard for serialization of R data, but these functions are not optimized for speed. On the other hand, `fst` is extremely fast, but only works on `data.frame`\\'s and certain column types.\n\n`qs` is both extremely fast and general: it can serialize any R object like `saveRDS` and is just as fast and sometimes faster than `fst`.\n\n###### Write\n\n-   `qs::qsave()`: for serialising R objects to `qs` files.\n\n###### Read\n\n-   `qs::qload()`: for loading `qs` files.\n\n# Benchmarks\n\nNow that we've discussed a bunch of relevant file formats and the packages used to read and write them, let's go ahead and test out the comparative performance of reading and writing them, as well as the file sizes of different formats.\n\n## Writing data\n\nLet's start by comparing write efficiency.\n\nBefore we start, we'll need some data to write. So let's load one of the parquet files from the course materials. Let's go for the file with 1,000,000 rows. If you want to speed up the testing you can use the file with 100,000 rows by changing the value of `nrow`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_rows <- 1000000L\ndata <- arrow::read_parquet(here::here(\"data\", paste0(\"synthpop_\", n_rows, \".parquet\")))\n```\n:::\n\n\nLet's also load `dplyr` for the pipe and other helpers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nLet's now create a directory to write our data to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout_dir <- here::here(\"data\", \"write\")\nfs::dir_create(out_dir)\n```\n:::\n\n\nTo compare each file format and function combination (where appropriate), I've written a function that uses the vale of the `format` argument and the `switch()` function to deploy different write function/format combination for writing out the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_dataset <- function(data, \n                          format = c(\"csv\", \"csv_readr\", \"csv_dt\", \"csv_arrow\",\n                                     \"parquet\", \"arrow\", \"rdata\", \"rds\", \"fst\", \"qs\"),\n                          out_dir, \n                          file_name = paste0(\"synthpop_\", n_rows, \"_\")) {\n    \n    \n    switch (format,\n            ## FLAT FILES ###\n            # write cvs using base\n            csv = write.csv(data, \n                            file = fs::path(out_dir, \n                                            paste0(file_name, format), \n                                            ext = \"csv\"),\n                            row.names = FALSE),\n            # write csv using readr\n            csv_readr = readr::write_csv(data, \n                                         file = fs::path(\n                                             out_dir, \n                                             paste0(file_name, format), \n                                             ext = \"csv\")),\n            # write csv using data.table\n            csv_dt = data.table::fwrite(data, \n                                        file = fs::path(\n                                            out_dir, \n                                            paste0(file_name, format), \n                                            ext = \"csv\")),\n            # write csv using arrow\n            csv_arrow = arrow::write_csv_arrow(data, \n                                               file = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"csv\")),\n            ## BINARY FILES ###\n            # write parquet using arrow\n            parquet = arrow::write_parquet(data, sink = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"parquet\")),\n            # write arrow IPC using arrow\n            arrow = arrow::write_feather(data, sink = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"arrow\")),\n            # write RData using base\n            rdata = save(data, file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"RData\"),\n                         version = 2),\n            # write rds using base\n            rds = saveRDS(data, file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"rds\"),\n                          version = 2),\n            # write fst using fst\n            fst = fst::write_fst(data, path = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"fst\")),\n            # write qs using qs\n            qs = qs::qsave(data, file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"qs\"))\n            \n            \n    )\n}\n```\n:::\n\n\nI've also write a function to process the `bench::mark()` output, removing unnecessary information, arranging the results in descending order of median and printing the result as a `gt()` table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_bm <- function(benchmark) {\n    benchmark[, c(\"expression\", \"min\", \"result\", \"memory\", \"time\", \"gc\")] <- NULL\n    benchmark %>%\n        arrange(median) %>%\n        gt::gt()\n}\n```\n:::\n\n\nWe're now ready to run our benchmarks. I've set them up as a `bench::press()` so we can run the same function every time but vary the `format` argument for each test:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::press(\n    format = c(\"csv\", \"csv_readr\", \"csv_dt\", \"csv_arrow\",\n               \"parquet\", \"arrow\", \"rdata\", \"rds\", \"fst\", \"qs\"),\n    {\n        bench::mark(write_dataset(data, format = format, out_dir = out_dir))\n    }\n) %>%\n    print_bm()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"xbdbkwaewx\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#xbdbkwaewx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#xbdbkwaewx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#xbdbkwaewx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#xbdbkwaewx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#xbdbkwaewx .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#xbdbkwaewx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#xbdbkwaewx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#xbdbkwaewx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#xbdbkwaewx .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#xbdbkwaewx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#xbdbkwaewx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#xbdbkwaewx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#xbdbkwaewx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#xbdbkwaewx .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xbdbkwaewx .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#xbdbkwaewx .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#xbdbkwaewx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xbdbkwaewx .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#xbdbkwaewx .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xbdbkwaewx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#xbdbkwaewx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xbdbkwaewx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xbdbkwaewx .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xbdbkwaewx .gt_left {\n  text-align: left;\n}\n\n#xbdbkwaewx .gt_center {\n  text-align: center;\n}\n\n#xbdbkwaewx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#xbdbkwaewx .gt_font_normal {\n  font-weight: normal;\n}\n\n#xbdbkwaewx .gt_font_bold {\n  font-weight: bold;\n}\n\n#xbdbkwaewx .gt_font_italic {\n  font-style: italic;\n}\n\n#xbdbkwaewx .gt_super {\n  font-size: 65%;\n}\n\n#xbdbkwaewx .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#xbdbkwaewx .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#xbdbkwaewx .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#xbdbkwaewx .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#xbdbkwaewx .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#xbdbkwaewx .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#xbdbkwaewx .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"format\">format</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"median\">median</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"itr/sec\">itr/sec</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mem_alloc\">mem_alloc</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"gc/sec\">gc/sec</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n_itr\">n_itr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n_gc\">n_gc</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"total_time\">total_time</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">arrow</td>\n<td headers=\"median\" class=\"gt_row gt_center\">58.73ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">16.9895018</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">40.38KB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">9</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">529.74ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_dt</td>\n<td headers=\"median\" class=\"gt_row gt_center\">236.50ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">4.2072572</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">1.44MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">3</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">713.05ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">fst</td>\n<td headers=\"median\" class=\"gt_row gt_center\">294.15ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">3.3996278</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">3.54MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">588.30ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">parquet</td>\n<td headers=\"median\" class=\"gt_row gt_center\">315.53ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">3.1692389</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">2.27MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">631.07ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_arrow</td>\n<td headers=\"median\" class=\"gt_row gt_center\">340.96ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">2.9329298</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">3.34MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">681.91ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">qs</td>\n<td headers=\"median\" class=\"gt_row gt_center\">345.49ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">2.8944557</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">176.88KB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">690.98ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_readr</td>\n<td headers=\"median\" class=\"gt_row gt_center\">517.42ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">1.9326511</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">66.58MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">1.9326511</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">517.42ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">rds</td>\n<td headers=\"median\" class=\"gt_row gt_center\">3.12s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.3208688</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">8.63KB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.0000000</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">0</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">3.12s</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">rdata</td>\n<td headers=\"median\" class=\"gt_row gt_center\">3.12s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.3201837</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">8.63KB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.3201837</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">3.12s</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv</td>\n<td headers=\"median\" class=\"gt_row gt_center\">3.24s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.3082182</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">61.33MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">3.3904006</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">11</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">3.24s</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nWe see that:\n\n-    the fastest write format by quite some margin is the arrow format using `arrow::write_feather()`.\n\n-   All `arrow` package are actually quite efficient, all featuring in the top 5 for speed, regardless of format.\n\n-   For `csv` formats however, there is a clear winner, `data.table()`.\n\n-   Both `qs` and `fst` are, as advertised, quite fast and `qs` in particular should definitely be considered when needing to store more complex R objects.\n\n-   Base functions `write.csv()` , `save()` and `saveRDS` are often orders of magnitude slower.\n\n### Size on disk\n\nLet's also check how much space each file format takes up on disk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(file = basename(fs::dir_ls(out_dir)),\n               size = file.size(fs::dir_ls(out_dir))) |>\n    arrange(size) |>\n    mutate(size = gdata::humanReadable(size,\n                                       standard=\"SI\",\n                                       digits=1)) |>\n    gt::gt()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"wuvjjdspcb\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#wuvjjdspcb .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#wuvjjdspcb .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wuvjjdspcb .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wuvjjdspcb .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wuvjjdspcb .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wuvjjdspcb .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wuvjjdspcb .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wuvjjdspcb .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wuvjjdspcb .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#wuvjjdspcb .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wuvjjdspcb .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wuvjjdspcb .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wuvjjdspcb .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wuvjjdspcb .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wuvjjdspcb .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#wuvjjdspcb .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#wuvjjdspcb .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wuvjjdspcb .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#wuvjjdspcb .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wuvjjdspcb .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wuvjjdspcb .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wuvjjdspcb .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wuvjjdspcb .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wuvjjdspcb .gt_left {\n  text-align: left;\n}\n\n#wuvjjdspcb .gt_center {\n  text-align: center;\n}\n\n#wuvjjdspcb .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wuvjjdspcb .gt_font_normal {\n  font-weight: normal;\n}\n\n#wuvjjdspcb .gt_font_bold {\n  font-weight: bold;\n}\n\n#wuvjjdspcb .gt_font_italic {\n  font-style: italic;\n}\n\n#wuvjjdspcb .gt_super {\n  font-size: 65%;\n}\n\n#wuvjjdspcb .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#wuvjjdspcb .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#wuvjjdspcb .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#wuvjjdspcb .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#wuvjjdspcb .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#wuvjjdspcb .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#wuvjjdspcb .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"file\">file</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"size\">size</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_parquet.parquet</td>\n<td headers=\"size\" class=\"gt_row gt_left\">  7.1 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_rds.rds</td>\n<td headers=\"size\" class=\"gt_row gt_left\"> 11.9 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_rdata.RData</td>\n<td headers=\"size\" class=\"gt_row gt_left\"> 11.9 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_qs.qs</td>\n<td headers=\"size\" class=\"gt_row gt_left\"> 16.2 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_arrow.arrow</td>\n<td headers=\"size\" class=\"gt_row gt_left\"> 47.8 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_fst.fst</td>\n<td headers=\"size\" class=\"gt_row gt_left\"> 48.4 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_csv_dt.csv</td>\n<td headers=\"size\" class=\"gt_row gt_left\">106.4 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_csv_readr.csv</td>\n<td headers=\"size\" class=\"gt_row gt_left\">110.8 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_csv.csv</td>\n<td headers=\"size\" class=\"gt_row gt_left\">120.4 MB</td></tr>\n    <tr><td headers=\"file\" class=\"gt_row gt_left\">synthpop_1000000_csv_arrow.csv</td>\n<td headers=\"size\" class=\"gt_row gt_left\">120.8 MB</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nIt's clear that binary formats take up a lot less space on disk that csv text files. At the extremes, parquet files take up over 17 times less space that a csv file written out with `write.csv()` or `arrow::write_csv_arrow()`.\n\n## Reading data\n\nLet's now use the files we created to test how efficient different formats and functions are in reading in.\n\nJust like I did before with `write_dataset()`, I've written a function to read the appropriate file using the appropriate function according to the value of the `format` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_dataset <- function(data, format = c(\"csv\", \"csv_readr\", \"csv_dt\", \"csv_arrow\",\n                                           \"parquet\", \"arrow\", \"rdata\", \"rds\", \"fst\", \"qs\"),\n                          out_dir,\n                          file_name = paste0(\"synthpop_\", n_rows, \"_\")) {\n    \n    \n    switch (format,\n            ## FLAT FILES ###\n            # read cvs using base\n            csv = read.csv(file = fs::path(out_dir, \n                                            paste0(file_name, format), \n                                            ext = \"csv\")),\n            # read cvs using readr\n            csv_readr = readr::read_csv(file = fs::path(\n                                             out_dir, \n                                             paste0(file_name, format), \n                                             ext = \"csv\")),\n            # read cvs using data.table\n            csv_dt = data.table::fread(file = fs::path(\n                                            out_dir, \n                                            paste0(file_name, format), \n                                            ext = \"csv\")),\n            # read cvs using arrow\n            csv_arrow = arrow::read_csv_arrow(file = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"csv\")),\n            ## BINARY FILES ###\n            # read parquet using arrow\n            parquet = arrow::read_parquet(file = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"parquet\")),\n            # read arrow using arrow\n            arrow = arrow::read_feather(file = fs::path(\n                                                   out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"arrow\")),\n            # read RData using base\n            rdata = load(file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"RData\")),\n            # read rds using base\n            rds = readRDS(file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"rds\")),\n            fst = fst::read_fst(path = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"fst\")),\n            qs = qs::qload(file = fs::path(out_dir, \n                                                   paste0(file_name, format), \n                                                   ext = \"qs\"))\n            \n            \n    )\n}\n```\n:::\n\n\nAnd again, I've set up our benchmarks as a `bench::press()` so we can run the same function every time but vary the `format` argument for each test:\n\nLet's see how fast our format/function combos are at reading!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::press(\n    format = c(\"csv\", \"csv_readr\", \"csv_dt\", \"csv_arrow\",\n            \"parquet\", \"arrow\", \"rdata\", \"rds\", \"fst\", \"qs\"),\n    {\n    bench::mark(\n        read_dataset(data, format = format, out_dir = out_dir),\n        relative = FALSE)\n    }\n) %>%\n    print_bm()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"nvmnlwlkyn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#nvmnlwlkyn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#nvmnlwlkyn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#nvmnlwlkyn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#nvmnlwlkyn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#nvmnlwlkyn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#nvmnlwlkyn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#nvmnlwlkyn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#nvmnlwlkyn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#nvmnlwlkyn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#nvmnlwlkyn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#nvmnlwlkyn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#nvmnlwlkyn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#nvmnlwlkyn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#nvmnlwlkyn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nvmnlwlkyn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#nvmnlwlkyn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#nvmnlwlkyn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nvmnlwlkyn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#nvmnlwlkyn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nvmnlwlkyn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#nvmnlwlkyn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nvmnlwlkyn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#nvmnlwlkyn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nvmnlwlkyn .gt_left {\n  text-align: left;\n}\n\n#nvmnlwlkyn .gt_center {\n  text-align: center;\n}\n\n#nvmnlwlkyn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#nvmnlwlkyn .gt_font_normal {\n  font-weight: normal;\n}\n\n#nvmnlwlkyn .gt_font_bold {\n  font-weight: bold;\n}\n\n#nvmnlwlkyn .gt_font_italic {\n  font-style: italic;\n}\n\n#nvmnlwlkyn .gt_super {\n  font-size: 65%;\n}\n\n#nvmnlwlkyn .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#nvmnlwlkyn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#nvmnlwlkyn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#nvmnlwlkyn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#nvmnlwlkyn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#nvmnlwlkyn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#nvmnlwlkyn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"format\">format</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"median\">median</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"itr/sec\">itr/sec</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mem_alloc\">mem_alloc</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"gc/sec\">gc/sec</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n_itr\">n_itr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n_gc\">n_gc</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"total_time\">total_time</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">arrow</td>\n<td headers=\"median\" class=\"gt_row gt_center\">10.56ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">94.3128761</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">12.0MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">6.7366340</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">42</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">3</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">445.33ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">parquet</td>\n<td headers=\"median\" class=\"gt_row gt_center\">30.57ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">33.0283989</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">11.5MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">2.2018933</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">15</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">454.15ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_arrow</td>\n<td headers=\"median\" class=\"gt_row gt_center\">56.60ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">17.5962129</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">25.0MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">2.5137447</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">7</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">397.81ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">fst</td>\n<td headers=\"median\" class=\"gt_row gt_center\">232.94ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">4.2929415</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">76.3MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">2.1464707</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">465.88ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_dt</td>\n<td headers=\"median\" class=\"gt_row gt_center\">309.57ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">3.2302349</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">97.7MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">3.2302349</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">309.57ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">qs</td>\n<td headers=\"median\" class=\"gt_row gt_center\">342.91ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">2.9162241</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">76.3MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">2.9162241</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">2</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">2</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">685.82ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv_readr</td>\n<td headers=\"median\" class=\"gt_row gt_center\">624.16ms</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">1.6021469</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">91.0MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">3.2042939</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">2</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">624.16ms</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">rdata</td>\n<td headers=\"median\" class=\"gt_row gt_center\">1.08s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.9246915</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">76.3MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.9246915</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">1.08s</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">rds</td>\n<td headers=\"median\" class=\"gt_row gt_center\">1.10s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.9105128</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">76.3MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">0.9105128</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">1</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">1.10s</td></tr>\n    <tr><td headers=\"format\" class=\"gt_row gt_left\">csv</td>\n<td headers=\"median\" class=\"gt_row gt_center\">1.96s</td>\n<td headers=\"itr/sec\" class=\"gt_row gt_right\">0.5095255</td>\n<td headers=\"mem_alloc\" class=\"gt_row gt_center\">378.9MB</td>\n<td headers=\"gc/sec\" class=\"gt_row gt_right\">2.5476277</td>\n<td headers=\"n_itr\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n_gc\" class=\"gt_row gt_right\">5</td>\n<td headers=\"total_time\" class=\"gt_row gt_center\">1.96s</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nResults of our experiments show that:\n\n-   The arrow format using `arrow::read_feather()` is again the fastest.\n\n-   Again all `arrow` functions are the fastest for reading, regardless of format, occupying the top 3.\n\n-   `data.table::fread()` is again very competitive for reading CSVs.\n\n-   `qs` also is highly performant, and a good function to know given it can be used for more complex objects\n\n-   base functions for reading files, whether binary or CSV are again the slowest by quite some margin.\n\n-   It should be noted that both `readr::read_csv()` and `read.csv()` can be made much faster by pre-specifying the data type for each column when reading.\n\n## \n\n::: callout-important\n## Take Aways\n\n-   The `arrow` package offers some of the fastest functions for writing both flat (e.g. CSV) and binary files like `parquet` and `arrow`.\n\n-   The `arrow` format is especially fast to read and write.\n\n-   Functions from the `data.table` package are also solid contenders for reading and writing CSV files.\n\n-   Functions in package `qs` are also quite performant, especially given they can read and write more complex R objects.\n\n-   Binary files are the most disk space efficient, particularly the `parquet` file format.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}